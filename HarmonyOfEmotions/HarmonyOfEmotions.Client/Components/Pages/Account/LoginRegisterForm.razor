@page "/loginform"
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inherits ErrorHandlingComponentBase
@inject NavigationManager Navigation

<EditForm FormName="AuthForm" Model="@UserAccount" OnValidSubmit="HandleSubmit" Enhance>
	<DataAnnotationsValidator />

	<div class="mb-4">
		<label>Email</label>
		<InputText @bind-Value="UserAccount.Email" class="form-control" placeholder="Email" />
		<ValidationMessage For="@(() => UserAccount.Email)" />
	</div>

	<div class="mb-3">
		<label>Password</label>
		<InputText @bind-Value="UserAccount.Password" class="form-control" type="password" placeholder="Password" />
		<ValidationMessage For="@(() => UserAccount.Password)" />
	</div>

	@if (!IsLogin)
	{
		<div class="mb-3">
			<label>Confirm Password</label>
			<InputText @bind-Value="UserAccount.ConfirmPassword" class="form-control" type="password" placeholder="Confirm Password" />
			<ValidationMessage For="@(() => UserAccount.ConfirmPassword)" />
		</div>
	}

	<div class="mb-3 text-center">
		<span class="text-danger">@errorMessage</span>
	</div>

	<div class="mb-2 d-grid gap-3">
		<LoadingButton OnClick="HandleSubmit" Text="@AuthText">
		</LoadingButton>
	</div>
</EditForm>

@code {
	[Parameter]
	public bool IsLogin { get; set; }

	[Parameter]
	public EventCallback<string?> OnFormSubmit { get; set; }

	[SupplyParameterFromForm]
	public UserAccount UserAccount { get; set; } = new UserAccount();

	private string? errorMessage { get; set; }
	private string? AuthText => IsLogin ? "Login" : "Register";

	private async Task HandleSubmit()
	{
		errorMessage = null;

		if (IsLogin)
		{
			await HandleLogin();
		}
		else
		{
			await HandleRegister();
		}


		Navigation.NavigateTo("/music-recommender-system", true);
	}

	private async Task HandleLogin()
	{
		try
		{
			var result = await AuthService.Login(UserAccount.Email!, UserAccount.Password!);

			if (result == null)
			{
				errorMessage = "Invalid email or password";
				return;
			}

			await ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(UserAccount.Email!);
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			return;
		}
	}

	private async Task HandleRegister()
	{
		var result = await AuthService.Register(UserAccount.Email!, UserAccount.Password!);

		if (result == null)
		{
			errorMessage = "Registration failed";
			return;
		}

		// Automatically log in the user after successful registration
		await HandleLogin();
	}
}
