@page "/artist-info"
@page "/artist-info/{Artist}"
@inherits ErrorHandlingComponentBase
@inject ArtistInfoService ArtistInfoService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<AuthorizeView>
	<NotAuthorized>
		<AccessDenied />
	</NotAuthorized>
	<Authorized>

		<h1 class="my-4">Artist Info</h1>

		<div class="input-group mb-3">
			<input @bind="Artist" class="form-control" placeholder="Enter artist name" />
			<button class="btn btn-primary" @onclick="LoadArtistInfo">Load Artist Info</button>
		</div>

		@if (ArtistInformation != null)
		{
			<div class="row">
				@{
					string length = ArtistInformation.ImageUrl != null ? "8" : "12";
				}
				@if (!string.IsNullOrEmpty(ArtistInformation.ImageUrl))
				{
					<div class="col-md-4">
						<img src="@ArtistInformation.ImageUrl" class="img-fluid" alt="@ArtistInformation.Name" />
					</div>
				}
				<div class="col-md-@length">
					<h2>@ArtistInformation.Name</h2>
					@if (ArtistInformation.Country != null)
					{
						<p>
							<strong>Country:</strong> @ArtistInformation.Country.Name @GetCountryEmoji(ArtistInformation.Country.Code)
						</p>
					}
					@if (ArtistInformation.Lifetime != null)
					{
						var beginYear = ArtistInformation.Lifetime.Begin ?? DateTime.MinValue;
						var endYear = ArtistInformation.Lifetime.End ?? DateTime.MinValue;
						<p>
							<strong>Lived between:</strong> @DateUtils.FormatDate(beginYear) - @DateUtils.FormatDate(endYear)
						</p>
					}
					@if (!string.IsNullOrEmpty(ArtistInformation.Summary))
					{
						<p><strong>Biography:</strong> @((MarkupString)ArtistInformation.Summary)</p>
					}
					@if (!string.IsNullOrEmpty(ArtistInformation.Content))
					{
						<div>
							<button class="btn btn-link" @onclick="ToggleContentVisibility">
								@(showContent ? "Show Less" : "Show More")
							</button>
							@if (showContent)
							{

								var formattedContent = FormatContent(ArtistInformation.Content);
								var paragraphs = formattedContent.Split("<br>", StringSplitOptions.RemoveEmptyEntries);

								@foreach (var paragraph in paragraphs)
								{
									<p>@((MarkupString)paragraph)</p>
								}
							}
						</div>
					}
				</div>
			</div>
		}

	</Authorized>
</AuthorizeView>

@code {
	[Parameter]
	public string? Artist { get; set; }
	private Artist? ArtistInformation;
	private bool showContent = false;

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(Artist))
		{
			await LoadArtistInfo();
		}
	}

	private async Task LoadArtistInfo()
	{
		if (!string.IsNullOrEmpty(Artist))
		{
			ArtistInformation = await ArtistInfoService.GetArtistInfo(Artist);
		}
	}

	private void ToggleContentVisibility()
	{
		showContent = !showContent;
	}

	private string FormatContent(string content)
	{
		if (string.IsNullOrEmpty(content))
		{
			return string.Empty;
		}

		int maxLength = 1000; // Lungimea maximă a paragrafului
		var paragraphs = new List<string>();
		var lines = content.Split('\n'); // Dacă textul este format din mai multe linii

		foreach (var line in lines)
		{
			var words = line.Split(' ');
			var sb = new StringBuilder();
			var lineLength = 0;

			foreach (var word in words)
			{
				if (sb.Length + word.Length + 1 <= maxLength)
				{
					sb.Append(word + " ");
					lineLength += word.Length + 1;
				}
				else
				{
					paragraphs.Add(sb.ToString());
					sb.Clear();
					sb.Append(word + " ");
					lineLength = word.Length + 1;
				}

				// Adaugă un alineat nou la punct
				if (word.EndsWith(".") && lineLength > maxLength / 2) // Punctul este la jumătatea lungimii maximă a paragrafului
				{
					paragraphs.Add(sb.ToString());
					sb.Clear();
					lineLength = 0;
				}
			}

			// Adaugă paragraful rămas
			paragraphs.Add(sb.ToString());
		}

		return string.Join("<br>", paragraphs); // Întoarce paragrafele separate prin un tag HTML de linie nouă
	}

	private string GetCountryEmoji(string code)
	{
		if (string.IsNullOrEmpty(code)) return string.Empty;

		// Convert country code to emoji flag
		return string.Concat(code.ToUpper().Select(c => char.ConvertFromUtf32(c + 0x1F1A5)));
	}
}
