@page "/music-recommender-system"
@inject IJSRuntime JSRuntime
@inject MusicRecommenderSystemService MusicRecommenderSystemService
@inject UserTrackPreferencesService UserTrackPreferencesService
@inject NavigationManager NavigationManager
@inherits ErrorHandlingComponentBase
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<AuthorizeView>
	<NotAuthorized>
		<AccessDenied />
	</NotAuthorized>
	<Authorized>
		<h1 class="my-4">Music Recommender System</h1>

		<div class="row">
			<div class="col-md-13">
				<div class="card border-0">
					<div class="card-body flex-column">
						<div class="text-center mt-1">
							<div class="matrix-container">
								<canvas @ref="canvasRef" width="800" height="600" @onclick="OnCanvasClick"></canvas>
							</div>

							<div class="slider-container">
								<label for="zSlider">Select danceability value:</label>

								<!-- Adjusted width, step value, and added background color -->
								<input type="range" id="zSlider" min="0" max="100000" step="1" @bind="z" class="slider" style="width: 300px; background-color: #ddd;" />
							</div>

							<div class="text-center mb-2 d-grid gap-2">
								<button type="button" class="btn btn-primary" @onclick="GetRecommendations">Get Recommendations</button>
							</div>

						</div>
					</div>
				</div>
			</div>
		</div>


		@if (recommendedTracks != null)
		{
			<TrackListComponent Tracks="recommendedTracks" />
		}
	</Authorized>
</AuthorizeView>

@code {
	private ElementReference canvasRef;
	private float x, y, z;
	private IEnumerable<Track>? recommendedTracks;

	private async Task GetRecommendations()
	{
		float zz = z / 100000;
		recommendedTracks = await MusicRecommenderSystemService.GetRecommendedTracks(x, y, zz);
	}

	private async Task OnCanvasClick(MouseEventArgs e)
	{
		var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasRef);
		var canvasX = e.ClientX - rect.Left;
		var canvasY = e.ClientY - rect.Top;
		x = (float)(canvasX / rect.Width);
		y = (float)(canvasY / rect.Height);
		await JSRuntime.InvokeVoidAsync("drawCircle", canvasRef, canvasX, canvasY);

		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("drawMatrix", canvasRef);
			var storedTracks = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tracks");
			if (!string.IsNullOrEmpty(storedTracks))
			{
				recommendedTracks = JsonSerializer.Deserialize<IEnumerable<Track>>(storedTracks);
				await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "tracks");
				StateHasChanged();
			}
		}
	}

	private class BoundingClientRect
	{
		public double Left { get; set; }
		public double Top { get; set; }
		public double Width { get; set; }
		public double Height { get; set; }
	}
}
