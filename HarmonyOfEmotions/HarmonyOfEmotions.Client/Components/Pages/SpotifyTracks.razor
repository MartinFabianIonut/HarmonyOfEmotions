@page "/spotify-tracks"
@page "/spotify-tracks/{searchKeyword}"
@inject SpotifyTrackService SpotifyTrackService
@inject UserTrackPreferencesService UserTrackPreferencesService
@inject GoogleSearchAutocompleteService GoogleSearchAutocompleteService
@inject NavigationManager NavigationManager
@inherits ErrorHandlingComponentBase
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<AuthenticatedContent>
	<h1 class="my-4">Spotify Tracks</h1>

	<div class="input-group mb-3">
		<input @bind="searchKeyword" @oninput="OnInputChanged" placeholder="Search for an artist, a composer, or a song" class="form-control" />
		<button class="btn btn-primary" @onclick="SearchTracks">Search</button>
	</div>

	@if (suggestions != null && suggestions.Any())
	{
		<ul class="list-group position-absolute" style="z-index: 1;">
			@foreach (var suggestion in suggestions)
			{
				<li class="list-group-item list-group-item-action" @onclick="() => SelectSuggestion(suggestion)">
					@suggestion
				</li>
			}
		</ul>
	}

	<br />

	@if (tracks != null)
	{
		<div class="row">
			<div class="col-lg-10 col-md-12">
				<TrackListComponent Tracks="tracks" ArtistList="artistList" />
			</div>
			<div class="col-lg-2 col-md-12 text-center">
				<h3>See top tracks of one of these artists</h3>
				<ul>
					@foreach (var artist in artistList!)
					{
						<li>
							<button class="btn btn-link" @onclick="() => LoadTopTracks(artist.Id!)">@artist.Name</button>
						</li>
					}
				</ul>
			</div>
		</div>
	}
</AuthenticatedContent>

@code {
	[Parameter]
	public string? searchKeyword { get; set; }
	private IEnumerable<Track>? tracks;
	private IEnumerable<Artist>? artistList;
	private List<string> suggestions = new();

	private async Task SearchTracks()
	{
		if (!string.IsNullOrEmpty(searchKeyword))
		{
			tracks = await SpotifyTrackService.SearchTracksByKeyword(searchKeyword);
			LoadArtistList();
			StateHasChanged();
		}
	}

	private void LoadArtistList()
	{
		if (tracks != null)
		{
			var artistSet = new HashSet<Artist>(new ArtistNameComparer());

			foreach (var track in tracks)
			{
				artistSet.Add(new Artist { Id = track.ArtistId, Name = track.Artist });
			}

			var otherArtists = tracks.SelectMany(t => t.OtherArtists!.Zip(t.OtherArtistsId!, (name, id) => new Artist { Id = id, Name = name }));
			foreach (var artist in otherArtists)
			{
				artistSet.Add(artist);
			}

			artistList = artistSet.ToList();
		}
	}

	private async Task LoadTopTracks(string artistId)
	{
		tracks = await SpotifyTrackService.GetTopTracksForArtist(artistId);
		LoadArtistList();
	}

	private async Task OnInputChanged(ChangeEventArgs e)
	{
		searchKeyword = e.Value.ToString();
		if (!string.IsNullOrEmpty(searchKeyword))
		{
			suggestions = (await GoogleSearchAutocompleteService.FetchSearchKeywords(searchKeyword)).ToList();
		}
		else
		{
			suggestions.Clear();
		}
		StateHasChanged();
	}

	private async Task SelectSuggestion(string suggestion)
	{
		searchKeyword = suggestion;
		suggestions.Clear();
		StateHasChanged();
		await SearchTracks();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var storedTracks = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tracks");
			var storedArtistList = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "artistList");
			if (!string.IsNullOrEmpty(storedTracks) && !string.IsNullOrEmpty(storedArtistList))
			{
				tracks = JsonSerializer.Deserialize<IEnumerable<Track>>(storedTracks);
				artistList = JsonSerializer.Deserialize<IEnumerable<Artist>>(storedArtistList);
				LoadArtistList();
				await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "tracks");
				await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "artistList");
				StateHasChanged();
			}
		}
	}

	private class ArtistNameComparer : IEqualityComparer<Artist>
	{
		public bool Equals(Artist? x, Artist? y)
		{
			if (x == null || y == null) return false;
			return x.Name == y.Name;
		}

		public int GetHashCode(Artist obj)
		{
			return obj.Name!.GetHashCode();
		}
	}
}